use std::process::{Command, Output};

pub struct CommandInfo {
    pub cmd_input: String,
    pub cmd_output: Output
}
pub trait Malware {
    fn exe_command(&self) -> CommandInfo;
}

impl Malware for CommandInfo {
    fn exe_command(&self) -> CommandInfo {

        let cmd_input= self.cmd_input.clone();


        let cmd_output = if cfg!(target_os = "windows") {
            Command::new("cmd")
                .args(["/C", &cmd_input])
                .output()
                .expect("failed to execute process")
        } else {
            Command::new("sh")
                .arg("-c")
                .arg(&cmd_input)
                .output()
                .expect("failed to execute process")
        };

        CommandInfo {
            cmd_input,
            cmd_output
        }
    }
}
